/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EditPrescriptionForm.java
 *
 * Created on 22.Ara.2011, 23:50:27
 */
package com.drugstore.client.ui.prescription;

import com.drugstore.client.DrugstoreWSClient;
import com.drugstore.client.ui.model.PatientComboBoxModel;
import com.drugstore.client.util.DrugstoreClientUtil;
import com.drugstore.client.util.StringUtil;
import com.drugstore.client.ws.Doctor;
import com.drugstore.client.ws.Drug;
import com.drugstore.client.ws.Patient;
import com.drugstore.client.ws.Prescription;
import com.drugstore.client.ws.PrescriptionLineItem;
import com.drugstore.client.ws.PrescriptionType;
import com.sun.org.apache.xerces.internal.jaxp.datatype.XMLGregorianCalendarImpl;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Frame;
import java.awt.Toolkit;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import javax.xml.datatype.XMLGregorianCalendar;
import org.jdesktop.observablecollections.ObservableCollections;

/**
 *
 * @author ekisa
 */
public class EditPrescriptionForm extends javax.swing.JDialog {

    private List<PrescriptionLineItem> pliList;
    private Map<PrescriptionLineItem, List<Drug>> alternativesMap = new HashMap<PrescriptionLineItem, List<Drug>>();
    private Prescription data;
    private Long usage;
    private Long quantity;
    private final PrescriptionPropertyChangeListener prescriptionPropertyChangeListener = new PrescriptionPropertyChangeListener();
    
    /** Creates new form EditPrescriptionForm */
    public EditPrescriptionForm(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initData();
        this.addPropertyChangeListener("newLineItem", prescriptionPropertyChangeListener);
        this.addPropertyChangeListener("removeLineItem", prescriptionPropertyChangeListener);
        DrugstoreClientUtil.centerComponent(this);
    }

    public EditPrescriptionForm() {
    }
            
    public EditPrescriptionForm(PrescriptionListForm parent, boolean modal) {
        this(DrugstoreClientUtil.getTopFrame(), modal);
    }

    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        xMLDateAndStringConverter = new com.drugstore.client.util.XMLDateAndStringConverter();
        patientComboBoxModel = new com.drugstore.client.ui.model.PatientComboBoxModel();
        patientListRenderer = new com.drugstore.client.ui.renderer.PatientListRenderer();
        doctorListRenderer = new com.drugstore.client.ui.renderer.DoctorListRenderer();
        prescriptionLineItemCellRenderer1 = new com.drugstore.client.ui.renderer.PrescriptionLineItemCellRenderer();
        xMLDateAndUtilDateConverter1 = new com.drugstore.client.util.XMLDateAndUtilDateConverter();
        prescriptionTypeListRenderer1 = new com.drugstore.client.ui.renderer.PrescriptionTypeListRenderer();
        drugListRenderer1 = new com.drugstore.client.ui.renderer.DrugListRenderer();
        editAlternativeDrugForm1 = new com.drugstore.client.ui.prescription.EditAlternativeDrugForm();
        dateLabel = new javax.swing.JLabel();
        patientLabel = new javax.swing.JLabel();
        patientComboBox = new javax.swing.JComboBox();
        doctorLabel = new javax.swing.JLabel();
        doctorComboBox = new javax.swing.JComboBox();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jCalendar1 = new com.toedter.calendar.JCalendar();
        jLabel1 = new javax.swing.JLabel();
        prescriptionTypeComboBox = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        drugComboBox = new javax.swing.JComboBox();
        addDrugButton = new javax.swing.JButton();
        quantityTextField = new javax.swing.JTextField();
        usageTextField = new javax.swing.JTextField();
        removeLineItemButton = new javax.swing.JButton();
        alternativesFoundLabel = new javax.swing.JLabel();

        patientListRenderer.setText("patientListRenderer1");

        doctorListRenderer.setText("doctorListRenderer1");

        prescriptionLineItemCellRenderer1.setText("prescriptionLineItemCellRenderer1");

        prescriptionTypeListRenderer1.setText("prescriptionTypeListRenderer1");

        drugListRenderer1.setText("drugListRenderer1");

        javax.swing.GroupLayout editAlternativeDrugForm1Layout = new javax.swing.GroupLayout(editAlternativeDrugForm1.getContentPane());
        editAlternativeDrugForm1.getContentPane().setLayout(editAlternativeDrugForm1Layout);
        editAlternativeDrugForm1Layout.setHorizontalGroup(
            editAlternativeDrugForm1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        editAlternativeDrugForm1Layout.setVerticalGroup(
            editAlternativeDrugForm1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Edit Prescription");

        dateLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        dateLabel.setText("Date :");

        patientLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        patientLabel.setText("Patient :");

        patientComboBox.setModel(patientComboBoxModel);
        patientComboBox.setRenderer(patientListRenderer);

        org.jdesktop.beansbinding.Binding binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${data.patient}"), patientComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        doctorLabel.setFont(new java.awt.Font("Tahoma", 1, 11));
        doctorLabel.setText("Doctor :");

        doctorComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        doctorComboBox.setRenderer(doctorListRenderer);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${data.doctor}"), doctorComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        table.setColumnSelectionAllowed(true);
        table.setFillsViewportHeight(true);

        org.jdesktop.beansbinding.ELProperty eLProperty = org.jdesktop.beansbinding.ELProperty.create("${pliList}");
        org.jdesktop.swingbinding.JTableBinding jTableBinding = org.jdesktop.swingbinding.SwingBindings.createJTableBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, eLProperty, table);
        org.jdesktop.swingbinding.JTableBinding.ColumnBinding columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${drug.name}"));
        columnBinding.setColumnName("Drug");
        columnBinding.setColumnClass(String.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${quantity}"));
        columnBinding.setColumnName("Quantity");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        columnBinding = jTableBinding.addColumnBinding(org.jdesktop.beansbinding.ELProperty.create("${usage}"));
        columnBinding.setColumnName("Usage");
        columnBinding.setColumnClass(Long.class);
        columnBinding.setEditable(false);
        bindingGroup.addBinding(jTableBinding);
        jTableBinding.bind();
        jScrollPane1.setViewportView(table);
        table.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${data.date}"), jCalendar1, org.jdesktop.beansbinding.BeanProperty.create("date"));
        binding.setConverter(xMLDateAndUtilDateConverter1);
        bindingGroup.addBinding(binding);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel1.setText("Prescription Type :");

        prescriptionTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        prescriptionTypeComboBox.setRenderer(prescriptionTypeListRenderer1);

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${data.prescriptionType}"), prescriptionTypeComboBox, org.jdesktop.beansbinding.BeanProperty.create("selectedItem"));
        bindingGroup.addBinding(binding);

        prescriptionTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prescriptionTypeComboBoxActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jLabel2.setText("Drug :");

        drugComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        drugComboBox.setRenderer(drugListRenderer1);

        addDrugButton.setText("+");
        addDrugButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDrugButtonActionPerformed(evt);
            }
        });

        quantityTextField.setPreferredSize(new java.awt.Dimension(50, 30));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${quantity}"), quantityTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        quantityTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                quantityTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                quantityTextFieldFocusLost(evt);
            }
        });

        usageTextField.setPreferredSize(new java.awt.Dimension(50, 30));

        binding = org.jdesktop.beansbinding.Bindings.createAutoBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, this, org.jdesktop.beansbinding.ELProperty.create("${usage}"), usageTextField, org.jdesktop.beansbinding.BeanProperty.create("text"));
        bindingGroup.addBinding(binding);

        usageTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                usageTextFieldFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                usageTextFieldFocusLost(evt);
            }
        });

        removeLineItemButton.setText("Remove Line");
        removeLineItemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeLineItemButtonActionPerformed(evt);
            }
        });

        alternativesFoundLabel.setForeground(new java.awt.Color(255, 0, 0));
        alternativesFoundLabel.setText("Cheaper alternatives are available.. click here to see them!");
        alternativesFoundLabel.setVisible(false);
        alternativesFoundLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                alternativesFoundLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(alternativesFoundLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(removeLineItemButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateLabel, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(patientLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE)
                            .addComponent(doctorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 207, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(doctorComboBox, 0, 379, Short.MAX_VALUE)
                            .addComponent(patientComboBox, 0, 379, Short.MAX_VALUE)
                            .addComponent(prescriptionTypeComboBox, 0, 379, Short.MAX_VALUE)
                            .addComponent(jCalendar1, javax.swing.GroupLayout.DEFAULT_SIZE, 379, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(drugComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(usageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 76, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addDrugButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(88, 88, 88))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCalendar1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(dateLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE)
                        .addGap(60, 60, 60)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(patientComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(doctorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(doctorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prescriptionTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(drugComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addDrugButton)
                        .addComponent(quantityTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(usageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addGap(28, 28, 28)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(saveButton)
                        .addComponent(cancelButton)
                        .addComponent(removeLineItemButton))
                    .addComponent(alternativesFoundLabel))
                .addContainerGap())
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().persistPrescription(data);
        firePropertyChange("prescriptionList", null, data);
        this.dispose();
        
    }//GEN-LAST:event_saveButtonActionPerformed

    private void prescriptionTypeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prescriptionTypeComboBoxActionPerformed
        final DefaultComboBoxModel model = (DefaultComboBoxModel) drugComboBox.getModel();
        model.removeAllElements();
        
        List<Drug> allDrugs = DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().listDrugs();
        for (Iterator<Drug> iterator = allDrugs.iterator(); iterator.hasNext();) {
            Drug curr = iterator.next();
            if (curr.getPrescriptionType().equals(prescriptionTypeComboBox.getSelectedItem())) {
                model.addElement(curr);
            }
        }
        //firePropertyChange("data", null, data);
    }//GEN-LAST:event_prescriptionTypeComboBoxActionPerformed

    private void addDrugButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDrugButtonActionPerformed
        Drug selectedDrug = (Drug) drugComboBox.getSelectedItem();
        if(selectedDrug == null || !DrugstoreClientUtil.isNumber(quantityTextField.getText()) || !DrugstoreClientUtil.isNumber(usageTextField.getText())){
            return;
        }
        
        this.addLineItem(selectedDrug);
    }//GEN-LAST:event_addDrugButtonActionPerformed

    private void addLineItem(Drug selectedDrug) throws NumberFormatException {
        PrescriptionLineItem pli = new PrescriptionLineItem();
        pli.setDrug(selectedDrug);
        pli.setQuantity(Long.valueOf(quantityTextField.getText()));
        pli.setUsage(Long.valueOf(usageTextField.getText()));
        pliList.add(pli);
        
        firePropertyChange("newLineItem", null, pli);
        
    }

    private void quantityTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityTextFieldFocusGained
        quantityTextField.setText("");
    }//GEN-LAST:event_quantityTextFieldFocusGained

    private void quantityTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_quantityTextFieldFocusLost
        if(StringUtil.isEmpty(quantityTextField.getText())){
            quantityTextField.setText("Quantity");
        }
    }//GEN-LAST:event_quantityTextFieldFocusLost

    private void usageTextFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usageTextFieldFocusGained
        usageTextField.setText("");
    }//GEN-LAST:event_usageTextFieldFocusGained

    private void usageTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_usageTextFieldFocusLost
        if (StringUtil.isEmpty(usageTextField.getText())) {
            usageTextField.setText("Usage");
        }
    }//GEN-LAST:event_usageTextFieldFocusLost

    private void removeLineItemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeLineItemButtonActionPerformed
        if(table.getSelectedRow() != -1){
            PrescriptionLineItem itemToRemove = pliList.get(table.getSelectedRow());
            pliList.remove(table.getSelectedRow());
            this.firePropertyChange("removeLineItem", itemToRemove, null);
        }
    }//GEN-LAST:event_removeLineItemButtonActionPerformed

    private void alternativesFoundLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_alternativesFoundLabelMouseClicked
        editAlternativeDrugForm1 = new EditAlternativeDrugForm(alternativesMap, this);
        editAlternativeDrugForm1.addPropertyChangeListener("replaceLineItem", prescriptionPropertyChangeListener);
        editAlternativeDrugForm1.setVisible(true);
    }//GEN-LAST:event_alternativesFoundLabelMouseClicked

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addDrugButton;
    private javax.swing.JLabel alternativesFoundLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JComboBox doctorComboBox;
    private javax.swing.JLabel doctorLabel;
    private com.drugstore.client.ui.renderer.DoctorListRenderer doctorListRenderer;
    private javax.swing.JComboBox drugComboBox;
    private com.drugstore.client.ui.renderer.DrugListRenderer drugListRenderer1;
    private com.drugstore.client.ui.prescription.EditAlternativeDrugForm editAlternativeDrugForm1;
    private com.toedter.calendar.JCalendar jCalendar1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox patientComboBox;
    private com.drugstore.client.ui.model.PatientComboBoxModel patientComboBoxModel;
    private javax.swing.JLabel patientLabel;
    private com.drugstore.client.ui.renderer.PatientListRenderer patientListRenderer;
    private com.drugstore.client.ui.renderer.PrescriptionLineItemCellRenderer prescriptionLineItemCellRenderer1;
    private javax.swing.JComboBox prescriptionTypeComboBox;
    private com.drugstore.client.ui.renderer.PrescriptionTypeListRenderer prescriptionTypeListRenderer1;
    private javax.swing.JTextField quantityTextField;
    private javax.swing.JButton removeLineItemButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable table;
    private javax.swing.JTextField usageTextField;
    private com.drugstore.client.util.XMLDateAndStringConverter xMLDateAndStringConverter;
    private com.drugstore.client.util.XMLDateAndUtilDateConverter xMLDateAndUtilDateConverter1;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables

    void newPrescription() {
        data = new Prescription();
        pliList = ObservableCollections.observableList(data.getLineItems());
        jCalendar1.setLocale(Locale.ENGLISH);
        data.setDate(new XMLGregorianCalendarImpl(new GregorianCalendar()));
        this.firePropertyChange("data", null, data);
        this.firePropertyChange("pliList", null, pliList);
    }
    
    void editPrescription(Prescription prescription){
        prescription = DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().findPrescription(prescription.getId());
        Prescription oldValue = this.data;
        this.data = prescription;
        pliList = ObservableCollections.observableList(data.getLineItems());
        this.firePropertyChange("data", null, prescription);
        this.firePropertyChange("pliList", null, pliList);
    }

    public Prescription getData() {
        return data;
    }

    public void setData(Prescription data) {
        editPrescription(data);
    }
     
    public void fetchPatientListFromServer(){
        final PatientComboBoxModel model = (PatientComboBoxModel) patientComboBox.getModel();
        model.setDataList(DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().listPatients());
    }
    
    public void fetchDoctorListFromServer() {
        List<Doctor> doctors = DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().listDoctors();
        final DefaultComboBoxModel model = (DefaultComboBoxModel) doctorComboBox.getModel();
        model.removeAllElements();
        for (Iterator<Doctor> iterator = doctors.iterator(); iterator.hasNext();) {
            model.addElement(iterator.next());
        }
    }
    
    public void fetchPrescriptionTypeListFromServer() {
        List<PrescriptionType> prescriptionTypes = DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().listPrescriptionTypes();
        final DefaultComboBoxModel model = (DefaultComboBoxModel) prescriptionTypeComboBox.getModel();
        model.removeAllElements();
        for (Iterator<PrescriptionType> iterator = prescriptionTypes.iterator(); iterator.hasNext();) {
            model.addElement(iterator.next());
        }
    }
    
    public void cleanDrugList() {
        final DefaultComboBoxModel model = (DefaultComboBoxModel) drugComboBox.getModel();
        model.removeAllElements();
        drugComboBox.setSelectedIndex(-1);
    }

    private void initData() {
        usage = 0L;
        quantity = 0L;
        usageTextField.setText("Usage");
        quantityTextField.setText("Quantity");
        fetchPatientListFromServer();
        fetchDoctorListFromServer();
        fetchPrescriptionTypeListFromServer();
        cleanDrugList();
        this.firePropertyChange("data", null, data);
    }

    
    public Long getQuantity() {
        return quantity;
    }

    public void setQuantity(Long quantity) {
        this.quantity = quantity;
    }

    public Long getUsage() {
        return usage;
    }

    public void setUsage(Long usage) {
        this.usage = usage;
    }

    public List<PrescriptionLineItem> getPliList() {
        return pliList;
    }

    public void setPliList(List<PrescriptionLineItem> pliList) {
        this.pliList = pliList;
    }



    class PrescriptionPropertyChangeListener implements PropertyChangeListener{

        @Override
        public void propertyChange(PropertyChangeEvent evt) {
            if(evt.getPropertyName().equals("newLineItem")){
                addNewAlternativeIfAvailable((PrescriptionLineItem)evt.getNewValue());
            }
            else if (evt.getPropertyName().equals("removeLineItem")) {
                removeAlternativeIfAvailable((PrescriptionLineItem) evt.getOldValue());
            }
            else if (evt.getPropertyName().equals("replaceLineItem")) {
                replaceWithAlternative((PrescriptionLineItem) evt.getOldValue(), (Drug) evt.getNewValue());
            }
        }

        private void addNewAlternativeIfAvailable(PrescriptionLineItem lineItem) {
            final List<Drug> alternativeDrugs = DrugstoreWSClient.getInstance().getWebService().getDrugstoreWSPort().findCheaperDrugAlternatives(lineItem.getDrug());
            // No cheaper alternative available, return
            if(alternativeDrugs.size() == 0){
                return;
            }
            
            //Add available alternatives
            alternativesMap.put(lineItem, alternativeDrugs);
            
            if(alternativesMap != null && alternativesMap.size()>0){
                alternativesFoundLabel.setVisible(true);
            }
        }
        
        private void removeAlternativeIfAvailable(PrescriptionLineItem lineItem) {
            alternativesMap.remove(lineItem);

            if (alternativesMap.size() == 0) {
                alternativesFoundLabel.setVisible(false);
            }
        }

        private void replaceWithAlternative(PrescriptionLineItem prescriptionLineItem, Drug drug) {
            prescriptionLineItem.setDrug(drug);
            firePropertyChange("pliList", null, pliList);
            table.revalidate();
            table.repaint();
        }
        
    }
}
